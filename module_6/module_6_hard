class Figure:
    sides_count = 0

    def __init__(self, *args):
        self.__sides = []
        for elem in args:
            if isinstance(elem, tuple):
                self.__color = list(elem)
            if isinstance(elem, int):
                self.__sides.append(elem)
        if len(self.__sides) != self.sides_count:
            self.__sides = []
            for sid in range(0, self.sides_count):
                self.__sides.append(1)

    def get_color(self):
        return self.__color

    def __is_valid_color(self, *new_color):
        permission = True
        if len(new_color) < 3:
            permission = False
        for col in new_color:
            if col < 0 or col > 255:
                permission = False
        return permission

    def set_color(self, *new_color):
        if self.__is_valid_color(*new_color):
            self.__color = list(new_color)

    def __is_valid_sides(self, *new_sides):
        permission = True
        if len(new_sides) != self.sides_count:
            permission = False
        for sides in new_sides:
            if sides <= 0:
                permission = False
        return permission

    def get_sides(self):
        return self.__sides

    def __len__(self):
        return sum(self.__sides)

    def set_sides(self, *new_sides):
        if self.__is_valid_sides(*new_sides):
            self.__sides = list(new_sides)


class Circle(Figure):
    sides_count = 1

    def __init__(self, *args):
        Figure.__init__(self,*args)
        self.__radius = self._Figure__sides[0] / 2*3.14

    def get_square(self):
        return 3.14*(self.__radius**2)


class Triangle(Figure):
    sides_count = 3

    def __init__(self, *args):
        Figure.__init__(self, *args)

    def get_square(self):
        p = sum(self._Figure__sides) / 2
        return (p*(p - self._Figure__sides[0])*(p - self._Figure__sides[1])*(p - self._Figure__sides[2]))**0.5


class Cube(Figure):
    sides_count = 12

    def __init__(self, *args):
        Figure.__init__(self, *args)
        self._Figure__sides = []
        for elem in args:
            if isinstance(elem, int):
                self._Figure__sides.append(elem)
        if len(self._Figure__sides) == 1:
            x = self._Figure__sides[0]
        else:
            x= 1
        self._Figure__sides = []
        for sid in range(0, self.sides_count):
            self._Figure__sides.append(x)

    def get_volume(self):
        return self._Figure__sides[0]**3


circle1 = Circle((200, 200, 100), 10)
cube1 = Cube((222, 35, 130), 6)

circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())

cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())
